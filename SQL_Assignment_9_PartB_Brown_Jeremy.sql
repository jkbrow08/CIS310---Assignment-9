--PG269 #1
SELECT PART_NUM, UPPER(DESCRIPTION)AS 'PART_DESCRIPTION'
FROM PART;

-- #2
SELECT CUSTOMER_NUM, CUSTOMER_NAME, CITY
FROM CUSTOMER
WHERE UPPER(CITY) = 'GROVE';

-- #3
SELECT CUSTOMER_NUM, CUSTOMER_NAME, ROUND(BALANCE,0) AS BALANCE
FROM CUSTOMER;

-- #4
SELECT ORDER_NUM, CUSTOMER.CUSTOMER_NUM, CUSTOMER_NAME, DATEADD(DAY,20,ORDER_DATE) AS PROMOTION_DATE
FROM CUSTOMER, ORDERS
WHERE CUSTOMER.CUSTOMER_NUM = ORDERS.CUSTOMER_NUM;

--5(A)
DROP PROC USP_DISP_CUSTOMER;

CREATE PROC USP_DISP_CUSTOMER
@customernum varchar(3)
AS
SELECT CUSTOMER_NAME, CREDIT_LIMIT
FROM CUSTOMER
WHERE CUSTOMER_NUM = @customernum;

EXEC USP_DISP_CUSTOMER 408;

EXEC USP_DISP_CUSTOMER 725;

--5(B)

DROP PROC USP_DISP_ORDER;

CREATE PROC USP_DISP_ORDER
@ordernum varchar(5)
AS
SELECT CUSTOMER.CUSTOMER_NUM, CUSTOMER_NAME, ORDER_DATE
FROM CUSTOMER, ORDERS
WHERE CUSTOMER.CUSTOMER_NUM = ORDERS.CUSTOMER_NUM AND 
ORDER_NUM = @ordernum;

EXEC USP_DISP_ORDER 21608;

EXEC USP_DISP_ORDER 21617;

--5(C)

DROP PROC USP_ADD_ORDER;

CREATE PROC USP_ADD_ORDER
@ordernum varchar(5),
@orderdate datetime,
@customernum varchar(3)
AS
INSERT INTO ORDERS(ORDER_NUM, ORDER_DATE, CUSTOMER_NUM)
VALUES
(@ordernum, @orderdate, @customernum);

EXEC USP_ADD_ORDER 21672, '19951023', 148;

SELECT *
FROM ORDERS
WHERE ORDER_NUM = 21672;

--5(D)
DROP PROC USP_CHNG_ORDER_NUM;

CREATE PROC USP_CHNG_ORDER_NUM
@ordernum varchar(5),
@orderdate datetime
AS
UPDATE ORDERS
SET ORDER_DATE = @orderdate
WHERE ORDER_NUM = @ordernum;

EXEC USP_CHNG_ORDER_NUM 21617, '20101030';

SELECT *
FROM ORDERS;

--5(E)
DROP PROC usp_DEL_ORDER;

CREATE PROC usp_DEL_ORDER
@ordernum varchar(5)
AS
DELETE 
FROM ORDER_LINE
WHERE ORDER_NUM = @ordernum

FROM ORDERS
WHERE ORDER_NUM = @ordernum;

EXEC usp_DEL_ORDER '21613';

SELECT *
FROM ORDERS;

--6

DROP PROC usp_DISP_CLASS_PART;

CREATE PROC usp_DISP_CLASS_PART
@class varchar(2)
AS
DECLARE @partnum varchar(4)
DECLARE @description varchar(15)
DECLARE @warehouse varchar(1)
DECLARE @price money

DECLARE  mycursor CURSOR READ_ONLY

FOR
SELECT PART_NUM, DESCRIPTION, WAREHOUSE, PRICE
FROM PART
WHERE CLASS = @class

OPEN mycursor

FETCH NEXT FROM mycursor
INTO @partnum, @description, @warehouse, @price

WHILE @@FETCH_STATUS = 0
BEGIN
	PRINT @partnum + '  ' + @description + '  ' + @warehouse + '  ' + CAST(@price as char(10))
	FETCH NEXT FROM mycursor
	INTO @partnum, @description, @warehouse, @price
END

CLOSE mycursor
DEALLOCATE mycursor;


EXEC usp_DISP_CLASS_PART 'AP';

SELECT PART_NUM, DESCRIPTION, WAREHOUSE, PRICE
FROM PART
WHERE CLASS = 'AP';

--8
DROP PROC usp_CHNG_PART_PRICE;

CREATE PROC usp_CHNG_PART_PRICE
@partnum varchar(4),
@price money
AS
UPDATE PART
SET PRICE = @price
WHERE PART_NUM = @partnum;

EXEC usp_CHNG_PART_PRICE 'AT94', 26.95;

SELECT * 
FROM PART;

--9(A)
DROP TRIGGER ADD_CUSTOMER

CREATE TRIGGER ADD_CUSTOMER
ON CUSTOMER
AFTER INSERT
AS
DECLARE @balance money
DECLARE @repnum varchar(2)
SELECT @balance = (SELECT BALANCE FROM INSERTED)
SELECT @repnum = (SELECT REP_NUM FROM INSERTED)
SELECT * FROM INSERTED 
UPDATE REP
SET COMMISSION = COMMISSION + (@balance * RATE)
WHERE REP_NUM = @repnum;

--Insert trigger event for 9a

INSERT INTO CUSTOMER
VALUES (152, 'Andys hardware', '2612 landor', 'Seattle','WA', 40999,15000, 20000,35)

SELECT *
FROM REP;

--9(B)
DROP TRIGGER UPDATE_CUSTOMER

CREATE TRIGGER UPDATE_CUSTOMER
ON CUSTOMER
AFTER UPDATE
AS
DECLARE @oldbalance money, @newbalance money
DECLARE @repnum varchar(2)
SELECT @oldbalance = BALANCE, @repnum = REP_NUM FROM DELETED
SELECT @newbalance = BALANCE, @repnum = REP_NUM FROM INSERTED
SELECT * FROM DELETED
SELECT * FROM INSERTED 
UPDATE REP
SET COMMISSION = COMMISSION + ((@newbalance - @oldbalance) * RATE)
WHERE REP_NUM = @repnum;

--Update trigger event for 9b
UPDATE CUSTOMER
SET BALANCE = 200
WHERE CUSTOMER_NUM = '152';

SELECT *
FROM REP;

--9(C)

DROP TRIGGER DELETE_CUSTOMER;

CREATE TRIGGER DELETE_CUSTOMER
ON CUSTOMER
AFTER DELETE
AS
DECLARE @balance money
DECLARE @repnum varchar(2)
SELECT @balance = BALANCE, @repnum = REP_NUM FROM DELETED
SELECT * FROM DELETED 
UPDATE REP
SET COMMISSION = COMMISSION - (@balance * RATE)
WHERE REP_NUM = @repnum;

--Delete trigger event for 9c
DELETE FROM CUSTOMER
WHERE CUSTOMER_NUM = '150' AND REP_NUM = 35;

SELECT *
FROM CUSTOMER;

SELECT *
FROM REP;